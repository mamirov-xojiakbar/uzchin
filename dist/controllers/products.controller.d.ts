import { ProductsService } from '../services/products.service';
import { Product } from '../models/product.model';
export declare class ProductsController {
    private readonly productsService;
    constructor(productsService: ProductsService);
    create(dto: {
        name: object;
        description: object;
        price: number;
        categoryId: number;
        code: string;
        dimensions: string;
        cubicVolume: number;
        bruttoWeight: number;
        nettoWeight: number;
        minOrderQuantity: number;
    }): Promise<Product>;
    findByCategory(id: number, language: string, limit?: number, offset?: number): Promise<{
        category: {
            id: any;
            name: string;
            parentId: number;
            createdAt: any;
            updatedAt: any;
        };
        products: {
            name: any;
            description: any;
            code: string;
            dimensions: string;
            cubicVolume: number;
            bruttoWeight: number;
            nettoWeight: number;
            minOrderQuantity: number;
            comments: {
                comment: string;
                grade: number;
                who: string;
            }[];
            averageGrade: number;
            totalComments: number;
            price: number;
            categoryId: number;
            views: number;
            salesCount: number;
            category: import("../models/category.model").Category;
            id?: number | any;
            createdAt?: Date | any;
            updatedAt?: Date | any;
            deletedAt?: Date | any;
            version?: number | any;
            _attributes: Product;
            dataValues: Product;
            _creationAttributes: Product;
            isNewRecord: boolean;
            sequelize: import("sequelize").Sequelize;
            _model: import("sequelize").Model<Product, Product>;
        }[];
    }>;
    findBestSellers(limit: string, lang: string, offset?: number): Promise<{
        name: any;
        description: any;
        comments: {
            comment: string;
            grade: number;
            who: string;
        }[];
        averageGrade: number;
        totalComments: number;
        price: number;
        categoryId: number;
        code: string;
        dimensions: string;
        cubicVolume: number;
        bruttoWeight: number;
        nettoWeight: number;
        minOrderQuantity: number;
        views: number;
        salesCount: number;
        category: import("../models/category.model").Category;
        id?: number | any;
        createdAt?: Date | any;
        updatedAt?: Date | any;
        deletedAt?: Date | any;
        version?: number | any;
        _attributes: Product;
        dataValues: Product;
        _creationAttributes: Product;
        isNewRecord: boolean;
        sequelize: import("sequelize").Sequelize;
        _model: import("sequelize").Model<Product, Product>;
    }[]>;
    addView(id: number): Promise<{
        message: string;
    }>;
    findTopViewed(limit: string, lang: string, offset?: number): Promise<{
        name: any;
        description: any;
        comments: {
            comment: string;
            grade: number;
            who: string;
        }[];
        averageGrade: number;
        totalComments: number;
        price: number;
        categoryId: number;
        code: string;
        dimensions: string;
        cubicVolume: number;
        bruttoWeight: number;
        nettoWeight: number;
        minOrderQuantity: number;
        views: number;
        salesCount: number;
        category: import("../models/category.model").Category;
        id?: number | any;
        createdAt?: Date | any;
        updatedAt?: Date | any;
        deletedAt?: Date | any;
        version?: number | any;
        _attributes: Product;
        dataValues: Product;
        _creationAttributes: Product;
        isNewRecord: boolean;
        sequelize: import("sequelize").Sequelize;
        _model: import("sequelize").Model<Product, Product>;
    }[]>;
    findProductsByFilter(categoryId: number, limit: number, offset: number, language?: string, sortBy?: 'price' | 'salesCount' | 'views' | 'rating', sortOrder?: 'ASC' | 'DESC'): Promise<{
        name: any;
        description: any;
        bruttoWeight: number;
        nettoWeight: number;
        price: number;
        categoryId: number;
        code: string;
        dimensions: string;
        cubicVolume: number;
        minOrderQuantity: number;
        views: number;
        salesCount: number;
        comments: import("../models/comment.model").Comment[];
        category: import("../models/category.model").Category;
        id?: number | any;
        createdAt?: Date | any;
        updatedAt?: Date | any;
        deletedAt?: Date | any;
        version?: number | any;
        _attributes: Product;
        dataValues: Product;
        _creationAttributes: Product;
        isNewRecord: boolean;
        sequelize: import("sequelize").Sequelize;
        _model: import("sequelize").Model<Product, Product>;
    }[]>;
    findTopRatedProducts(limit?: number, offset?: number, language?: string): Promise<Product[]>;
}
